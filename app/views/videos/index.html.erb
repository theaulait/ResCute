<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
  <%= csrf_meta_tags %>
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Videos</title>
</head>
<body>

<div id="player"></div>

<div class="container">

  <form class= "vidForm" action= "index" method= "post">
		<input id = "vidSearch" name="search" >
		<button id = "search">Search</button>
	</form>

  <%= @description %>
</div>

</body>
<script>
// video implementation from Google's API IFRAME Page
// from https://developers.google.com/youtube/iframe_api_reference#Getting_Started
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
// This function creates an <iframe> (and YouTube player) after the API code downloads.

var player;
var url = "tFx5wif-gsA";

// sets the default url, if a search is created, process info through the backend
if("<%= @videoId %>" != ""){
	url = "<%= @videoId %>";
}
// function for iframe, the url will change depending on the search criteria
function onYouTubeIframeAPIReady() {
  player = new YT.Player('player', {
    height: '390',
    width: '640',
    videoId: url,
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

// The API will call this function when the video player is ready.
function onPlayerReady(event) {
  event.target.playVideo();
}
// The API calls this function when the player's state changes.
// The function indicates that when playing a video (state=1), the player should play for five seconds and then stop.
var done = false;
function onPlayerStateChange(event) {
if (event.data == YT.PlayerState.PLAYING && !done) {
   setTimeout(stopVideo, 5000);
   done = true;
     }
   }
function stopVideo() {
  player.stopVideo();
}



</script>
</html>
